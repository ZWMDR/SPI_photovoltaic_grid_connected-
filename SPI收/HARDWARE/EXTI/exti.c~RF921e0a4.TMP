#include "exti.h"
#include "led.h"
#include "key.h"
#include "delay.h"
#include "usart.h"

//外部中断初始化函数


void TIM5_IRQHandler(void)
{
	u16 IC1Value;
	if(TIM_GetITStatus(TIM5,TIM_IT_CC1)==SET)
	{
		TIM_ClearITPendingBit(TIM5, TIM_IT_CC1);
		IC1Value = TIM_GetCapture1(TIM5)+1;
		if (IC1Value != 0)
		{
			Frequency_REF = (double)1000000/IC1Value;
			wave_measure_REF=1;
			if(!wave_measure_F)
			{
				Period_REF=Period=0;
				TIM_Cmd(TIM8,ENABLE);
			}
			else
			{
				Period_REF=Period;
				TIM_Cmd(TIM8,DISABLE);
				TIM_SetCounter(TIM8,0);
			}
		}
		else
		{
			Frequency_REF = 0;
		}
	}
}

void TIM3_IRQHandler(void)
{
	u16 IC1Value;
	if(TIM_GetITStatus(TIM3,TIM_IT_CC1)==SET)
	{
		TIM_ClearITPendingBit(TIM3,TIM_IT_CC1);
		IC1Value = TIM_GetCapture1(TIM3)+1;
		if (IC1Value != 0)
		{
			Frequency_F = (double)1000000/IC1Value;
			Period_F=Period;
			wave_measure_F=1;
			if(!wave_measure_REF)
			{
				Period_F=Period=0;
				TIM_Cmd(TIM8,ENABLE);
			}
			else
			{
				Period_F=Period;
				TIM_Cmd(TIM8,DISABLE);
				TIM_SetCounter(TIM8,0);
			}
		}
		else
		{
			Frequency_F = 0;
		}
	}
}


void TIM6_IRQHandler(void)
{
	if (TIM_GetITStatus(TIM6, TIM_IT_Update) != RESET) //检查指定的TIM中断发生与否:TIM 中断源 
	{
		PWM_Set_duty(&t);
		TIM_ClearITPendingBit(TIM6, TIM_IT_Update);  //清除TIMx的中断待处理位:TIM 中断源 
	}
}

void TIM7_IRQHandler(void)
{
	if (TIM_GetITStatus(TIM7, TIM_IT_Update) != RESET) //检查指定的TIM中断发生与否:TIM 中断源 
	{
		
		TIM_ClearITPendingBit(TIM7, TIM_IT_Update);  //清除TIMx的中断待处理位:TIM 中断源 
	}
}

void TIM8_UP_IRQHandler(void)
{
	if (TIM_GetITStatus(TIM8, TIM_IT_Update) != RESET) //检查指定的TIM中断发生与否:TIM 中断源 
	{
		Period++;
		TIM_ClearITPendingBit(TIM8, TIM_IT_Update);  //清除TIMx的中断待处理位:TIM 中断源 
	}
}
